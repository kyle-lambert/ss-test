datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String    @unique
  fullName String
  password Password?

  tenants UserTenant[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model UserTenant {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@unique([userId, tenantId, roleId])
}

model Tenant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type String

  stripeCustomerId String?

  users UserTenant[]
  roles Role[]

  subscription Subscription?
}

model Subscription {
  stripeId  String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeSubscriptionId String

  tenantId String @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [stripeId], onDelete: Cascade)

  priceId String
  price   Price  @relation(fields: [priceId], references: [stripeId], onDelete: Cascade)
}

model Product {
  stripeId  String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  active      Boolean

  subscriptions Subscription[]
  prices        Price[]
}

model Price {
  stripeId  String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unitAmount    Int?
  currency      String
  type          String
  active        Boolean
  billionScheme String
  interval      String?
  intervalCount Int?

  productId String
  product   Product @relation(fields: [productId], references: [stripeId], onDelete: Cascade)

  subscriptions Subscription[]
}

model Role {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  userTenant  UserTenant[]
  permissions Permission[]

  @@unique([id, tenantId])
}

model Permission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  roles Role[]
}
